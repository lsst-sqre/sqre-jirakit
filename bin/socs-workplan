#!/usr/bin/env python

from __future__ import print_function

# standard dependencies
import argparse
import textwrap

# in-house modules
import lsst.sqre.jirakit
from lsst.sqre.confluence import bold, heading, table
from lsst.sqre.jira2confluence import (
    check_description,
    create_list_from_numbered_description,
)

# argument parsing and default options

parser = argparse.ArgumentParser(
    prog="socs-workplan",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent(
        """

    Generate a full listing of the SOCS workplan possibly including issues in Confluence format.

    The output can be piped into a file that can then be cut-and-pasted into a Confluence page via the
    Markdown menu option.

    """
    ),
    epilog="Part of jirakit: https://github.com/lsst-sqre/sqre-jirakit",
)

parser.add_argument(
    "-s", "--server", default=lsst.sqre.jirakit.SERVER, help="JIRA server URL"
)
parser.add_argument(
    "-a",
    "--auth-file",
    default=None,
    help="Path to a file containing basic authentication information",
)
parser.add_argument(
    "-i",
    "--issues",
    action="store_true",
    default=False,
    help="Flag for adding table of issues assigned to epics",
)
parser.add_argument("-v", "--version", action="version", version="%(prog)s 0.1")

if __name__ == "__main__":
    opt = parser.parse_args()

    from jira import JIRA

    jira_server = JIRA(
        server=opt.server,
        basic_auth=lsst.sqre.jirakit.basic_auth_from_file(opt.auth_file),
    )

    query = 'project = Simulations AND issuetype = Epic AND summary ~ "SOCS Release" ORDER BY key'
    issues = jira_server.search_issues(query)

    page_content = []
    import time

    page_content.append("This page details the SOCS workplan.")
    page_content.append(
        "Updated: {0}".format(time.strftime("%Y-%m-%d %H:%M", time.localtime()))
    )
    page_content.append("")

    import os

    for issue in issues:
        socs_summary = issue.fields.summary
        page_content.append(heading(socs_summary, 2))
        socs_duedate = issue.fields.duedate
        page_content.append("{0} {1}".format(bold("Release Date:"), socs_duedate))
        page_content.append("")

        page_content.append(heading("Statement of Work", 3))
        socs_descr = issue.fields.description
        socs_work = create_list_from_numbered_description(socs_descr)
        page_content.append(os.linesep.join(socs_work))
        page_content.append("")

        sub_epic_links = lsst.sqre.jirakit.get_issue_links(issue, "Containment")
        sub_epics = [
            jira_server.issue(sub_epic_link.outwardIssue.key)
            for sub_epic_link in sub_epic_links
        ]
        for sub_epic in sub_epics:
            page_content.append(heading(sub_epic.fields.summary, 4))
            page_content.append(heading("Statement of Work", 5))
            page_content.append(check_description(sub_epic.fields.description))
            page_content.append("")
            if opt.issues:
                page_content.append(heading("Issues", 6))
                se_issues = jira_server.search_issues(
                    "'Epic Link' = '{0}'".format(sub_epic.fields.summary)
                )
                page_content.append("Number of Issues = {0}".format(len(se_issues)))
                page_content.append("")
                if len(se_issues) > 0:
                    headers = ["Key", "Description", "Status"]
                    keys = [se_issue.key for se_issue in se_issues]
                    summaries = [se_issue.fields.summary for se_issue in se_issues]
                    status_names = [
                        se_issue.fields.status.name for se_issue in se_issues
                    ]
                    page_content.append(table(headers, keys, summaries, status_names))
                    page_content.append("")

    print(os.linesep.join(page_content))
