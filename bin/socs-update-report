#!/usr/bin/env python

from __future__ import print_function

# standard dependencies
import argparse
import textwrap

# in-house modules
import lsst.sqre.jirakit

from lsst.sqre.jira2confluence import check_description
from lsst.sqre.jira2confluence import create_list_from_numbered_description
from lsst.sqre.confluence import bold
from lsst.sqre.confluence import heading
from lsst.sqre.confluence import heading_plus_link
from lsst.sqre.confluence import table

# argument parsing and default options

parser = argparse.ArgumentParser(
    prog='socs-update-report',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent('''

    Generate a full listing of the SOCS workplan possibly including issues in Confluence format, along with
    planned (Epic) and actual (Stories) storypoints for use in monthly reporting.

    The output can be piped into a file that can then be cut-and-pasted into a Confluence page via the
    Markdown menu option.

    '''),
    epilog='Part of jirakit: https://github.com/lsst-sqre/sqre-jirakit'
)

parser.add_argument('-s', '--server',
                    default=lsst.sqre.jirakit.SERVER,
                    help='JIRA server URL')
parser.add_argument('-a', '--auth-file',
                    default=None,
                    help='Path to a file containing basic authentication information')
parser.add_argument('-i', '--issues', action="store_true",
                    default=False,
                    help='Flag for adding table of issues assigned to epics')
parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.1')

if __name__ == "__main__":

    opt = parser.parse_args()

    from jira import JIRA
    jira_server = JIRA(server=opt.server, basic_auth=lsst.sqre.jirakit.basic_auth_from_file(opt.auth_file))

    query = "project = Simulations AND issuetype = Epic AND summary ~ \"SOCS Release\" ORDER BY key"
    issues = jira_server.search_issues(query)

    page_content = []
    import time
    page_content.append("This page details the SOCS workplan with planned and actual storypoints.")
    page_content.append("Updated: {0}".format(time.strftime("%Y-%m-%d %H:%M", time.localtime())))
    page_content.append("")

    import os
    for issue in issues:
        socs_summary = issue.fields.summary
        issue_url = lsst.sqre.jirakit.url_for_issue(issue.key)
        page_content.append(heading(heading_plus_link(socs_summary, issue.key, issue_url), 2))
        socs_duedate = issue.fields.duedate
        page_content.append("{0} {1}".format(bold("Release Date:"), socs_duedate))
        page_content.append("")

        page_content.append(heading("Statement of Work", 3))
        socs_descr = issue.fields.description
        socs_work = create_list_from_numbered_description(socs_descr)
        page_content.append(os.linesep.join(socs_work))
        page_content.append("")

        sub_epic_links = lsst.sqre.jirakit.get_issue_links(issue, "Containment")
        sub_epics = [jira_server.issue(sub_epic_link.outwardIssue.key) for sub_epic_link in sub_epic_links]
        for sub_epic in sub_epics:
            sub_epic_url = lsst.sqre.jirakit.url_for_issue(sub_epic.key)
            page_content.append(heading(heading_plus_link(sub_epic.fields.summary, sub_epic.key,
                                                          sub_epic_url), 4))
            page_content.append("Planned Story Points = "+str(sub_epic.fields.customfield_10202))
            page_content.append(heading("Statement of Work", 5))
            page_content.append(check_description(sub_epic.fields.description))
            page_content.append("")
            if opt.issues:
                page_content.append(heading("Issues", 6))
                se_issues = jira_server.search_issues("'Epic Link' = '{0}'".format(sub_epic.fields.summary))
                page_content.append("Number of Issues = {0}".format(len(se_issues)))
                page_content.append("")
                if len(se_issues) > 0:
                    headers = ["Key", "Description", "Status", "Story Points"]
                    keys = [se_issue.key for se_issue in se_issues]
                    summaries = [se_issue.fields.summary for se_issue in se_issues]
                    status_names = [se_issue.fields.status.name for se_issue in se_issues]
                    story_points = [str(se_issue.fields.customfield_10202) for se_issue in se_issues]
                    page_content.append(table(headers, keys, summaries, status_names, story_points))
                    page_content.append("")

    print(os.linesep.join(page_content))
